int:
InternalError("Throwable(Object(java/lang/InternalError)
  backtrace=java/lang/StackTraceElement[4]
  detailMessage=String(\"Compilation error: Verifier errors\")
  cause=Object(class java/lang/InternalError)
  stackTrace=java/lang/StackTraceElement[0]
  depth=int(4)
  suppressedExceptions=Object(class java/util/Collections$EmptyList)
):
stdout: Numbers: 48 and 18
GCD (recursive): 6

jit:
ERROR ThreadId(25) Error compiling instructions for Test.gcdIterative(II)I:
Error:
ModuleError(Compilation(Verifier(VerifierErrors([VerifierError { location: inst13, context: None, message: "invalid reference to entry block block0" }]))))
Constant Pool:
   #1 = Methodref          #2.#3
   #2 = Class              #4
   #3 = NameAndType        #5:#6
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Methodref          #8.#9
   #8 = Class              #10
   #9 = NameAndType        #11:#12
  #10 = Utf8               Test
  #11 = Utf8               gcd
  #12 = Utf8               (II)I
  #13 = Fieldref           #14.#15
  #14 = Class              #16
  #15 = NameAndType        #17:#18
  #16 = Utf8               java/lang/System
  #17 = Utf8               out
  #18 = Utf8               Ljava/io/PrintStream;
  #19 = Class              #20
  #20 = Utf8               java/lang/StringBuilder
  #21 = Methodref          #19.#3
  #22 = String             #23
  #23 = Utf8               Numbers: 
  #24 = Methodref          #19.#25
  #25 = NameAndType        #26:#27
  #26 = Utf8               append
  #27 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #28 = Methodref          #19.#29
  #29 = NameAndType        #26:#30
  #30 = Utf8               (I)Ljava/lang/StringBuilder;
  #31 = String             #32
  #32 = Utf8                and 
  #33 = Methodref          #19.#34
  #34 = NameAndType        #35:#36
  #35 = Utf8               toString
  #36 = Utf8               ()Ljava/lang/String;
  #37 = Methodref          #38.#39
  #38 = Class              #40
  #39 = NameAndType        #41:#42
  #40 = Utf8               java/io/PrintStream
  #41 = Utf8               println
  #42 = Utf8               (Ljava/lang/String;)V
  #43 = String             #44
  #44 = Utf8               GCD (recursive): 
  #45 = String             #46
  #46 = Utf8               GCD (iterative): 
  #47 = Methodref          #8.#48
  #48 = NameAndType        #49:#12
  #49 = Utf8               gcdIterative
  #50 = String             #51
  #51 = Utf8               LCM: 
  #52 = Methodref          #8.#53
  #53 = NameAndType        #54:#12
  #54 = Utf8               lcm
  #55 = String             #56
  #56 = Utf8               
Numbers: 
  #57 = String             #58
  #58 = Utf8               GCD: 
  #59 = Utf8               Code
  #60 = Utf8               LineNumberTable
  #61 = Utf8               StackMapTable
  #62 = Utf8               MethodParameters
  #63 = Utf8               a
  #64 = Utf8               b
  #65 = Utf8               main
  #66 = Utf8               ([Ljava/lang/String;)V
  #67 = Utf8               args
  #68 = Utf8               SourceFile
  #69 = Utf8               Test.java

Method:
Method { definition: Method { access_flags: MethodAccessFlags(PUBLIC | STATIC), name_index: 49, descriptor_index: 12, attributes: [Code { name_index: 59, max_stack: 2, max_locals: 3, code: [Iload_1, Ifeq(11), Iload_1, Istore_2, Iload_0, Iload_1, Irem, Istore_1, Iload_2, Istore_0, Goto(0), Iload_0, Ireturn], exception_table: [], attributes: [LineNumberTable { name_index: 60, line_numbers: [LineNumber { start_pc: 0, line_number: 10 }, LineNumber { start_pc: 2, line_number: 11 }, LineNumber { start_pc: 4, line_number: 12 }, LineNumber { start_pc: 8, line_number: 13 }, LineNumber { start_pc: 10, line_number: 14 }, LineNumber { start_pc: 11, line_number: 15 }] }, StackMapTable { name_index: 61, frames: [SameFrame { frame_type: 0 }, SameFrame { frame_type: 10 }] }] }, MethodParameters { name_index: 62, parameters: [MethodParameter { name_index: 63, access_flags: MethodAccessFlags(0x0) }, MethodParameter { name_index: 64, access_flags: MethodAccessFlags(0x0) }] }] }, name: "gcdIterative", descriptor: "(II)I", parameters: [Base(Int), Base(Int)], return_type: Some(Base(Int)), max_stack: 2, max_locals: 3, code: [Iload_1, Ifeq(11), Iload_1, Istore_2, Iload_0, Iload_1, Irem, Istore_1, Iload_2, Istore_0, Goto(0), Iload_0, Ireturn], line_numbers: [LineNumber { start_pc: 0, line_number: 10 }, LineNumber { start_pc: 2, line_number: 11 }, LineNumber { start_pc: 4, line_number: 12 }, LineNumber { start_pc: 8, line_number: 13 }, LineNumber { start_pc: 10, line_number: 14 }, LineNumber { start_pc: 11, line_number: 15 }], exception_table: [] }
